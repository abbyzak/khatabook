{
    "sourceFile": "apps/web/pages/manager/clients.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759222603512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759222603512,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react'\nimport type { GetServerSideProps } from 'next/types'\nimport { Button, Input, Card } from '@sabir-khatabook/ui'\nimport Layout from '@/components/Layout'\nimport { loadTranslations, detectLocaleFromCookie } from '@/utils/i18n'\nimport axios from 'axios'\n\ninterface Client {\n  id: number;\n  name: string;\n  phone?: string;\n  address?: string;\n  balance: number;\n}\n\ninterface ClientsProps {\n  translations: any;\n}\n\nexport default function Clients({ translations }: ClientsProps) {\n  const [user, setUser] = useState<any>(null)\n  const [clients, setClients] = useState<Client[]>([])\n  const [showModal, setShowModal] = useState(false)\n  const [editingClient, setEditingClient] = useState<Client | null>(null)\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n    address: ''\n  })\n\n  const t = (key: string) => {\n    const keys = key.split('.')\n    let value = translations\n    for (const k of keys) {\n      value = value?.[k]\n    }\n    return value || key\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const token = localStorage.getItem('auth_token')\n      if (!token) return\n\n      const headers = { Authorization: `Bearer ${token}` }\n      \n      const userResponse = await axios.get('/api/auth/me', { headers })\n      setUser(userResponse.data)\n\n      const clientsResponse = await axios.get('/api/manager/clients', { headers })\n      setClients(clientsResponse.data)\n    } catch (error) {\n      console.error('Failed to fetch data:', error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const token = localStorage.getItem('auth_token')\n      const headers = { Authorization: `Bearer ${token}` }\n\n      if (editingClient) {\n        await axios.put(`/api/manager/clients/${editingClient.id}`, formData, { headers })\n      } else {\n        await axios.post('/api/manager/clients', formData, { headers })\n      }\n\n      setShowModal(false)\n      setEditingClient(null)\n      setFormData({ name: '', phone: '', address: '' })\n      fetchData()\n    } catch (error) {\n      console.error('Failed to save client:', error)\n    }\n  }\n\n  const handleEdit = (client: Client) => {\n    setEditingClient(client)\n    setFormData({\n      name: client.name,\n      phone: client.phone || '',\n      address: client.address || ''\n    })\n    setShowModal(true)\n  }\n\n  const handleDelete = async (id: number) => {\n    if (!confirm('Are you sure?')) return\n\n    try {\n      const token = localStorage.getItem('auth_token')\n      const headers = { Authorization: `Bearer ${token}` }\n      await axios.delete(`/api/manager/clients/${id}`, { headers })\n      fetchData()\n    } catch (error) {\n      console.error('Failed to delete client:', error)\n    }\n  }\n\n  return (\n    <Layout user={user} translations={translations}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">{t('clients.title')}</h1>\n          <Button onClick={() => setShowModal(true)}>{t('clients.add')}</Button>\n        </div>\n\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('clients.name')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('clients.phone')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('clients.address')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('clients.balance')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('clients.actions')}\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {clients.map((client: Client) => (\n                  <tr key={client.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {client.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {client.phone || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {client.address || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <span className={`font-semibold ${client.balance > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                        â‚¨{client.balance.toLocaleString()}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 space-x-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"primary\" \n                        onClick={() => window.location.href = `/manager/clients/${client.id}`}\n                      >\n                        {t('clients.viewTransactions')}\n                      </Button>\n                      <Button size=\"sm\" variant=\"secondary\" onClick={() => handleEdit(client)}>\n                        {t('clients.edit')}\n                      </Button>\n                      <Button size=\"sm\" variant=\"danger\" onClick={() => handleDelete(client.id)}>\n                        {t('clients.delete')}\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {showModal && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n              <h2 className=\"text-lg font-semibold mb-4\">\n                {editingClient ? t('clients.edit') : t('clients.add')}\n              </h2>\n              \n              <form onSubmit={handleSubmit}>\n                <Input\n                  label={t('clients.name')}\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  required\n                />\n\n                <Input\n                  label={t('clients.phone')}\n                  value={formData.phone}\n                  onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                />\n\n                <Input\n                  label={t('clients.address')}\n                  value={formData.address}\n                  onChange={(e) => setFormData({...formData, address: e.target.value})}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      setShowModal(false)\n                      setEditingClient(null)\n                      setFormData({ name: '', phone: '', address: '' })\n                    }}\n                  >\n                    {t('clients.cancel')}\n                  </Button>\n                  <Button type=\"submit\">{t('clients.save')}</Button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </Layout>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const locale = detectLocaleFromCookie(context)\n  const translations = await loadTranslations(locale)\n\n  return {\n    props: {\n      translations\n    }\n  }\n}"
        }
    ]
}