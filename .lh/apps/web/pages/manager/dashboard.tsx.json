{
    "sourceFile": "apps/web/pages/manager/dashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759222603514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759222603514,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react'\nimport type { GetServerSideProps } from 'next'\nimport { Card } from '@sabir-khatabook/ui'\nimport Layout from '@/components/Layout'\nimport { loadTranslations, detectLocaleFromCookie } from '@/utils/i18n'\nimport axios from 'axios'\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'manager';\n}\n\ninterface DashboardProps {\n  translations: any\n}\n\nexport default function ManagerDashboard({ translations }: DashboardProps) {\n  const [user, setUser] = useState<User | null>(null)\n  const [stats, setStats] = useState({\n    totalSales: 0,\n    totalDues: 0,\n    lowStockItems: 0,\n    recentTransactions: []\n  })\n\n  const t = (key: string) => {\n    const keys = key.split('.')\n    let value = translations\n    for (const k of keys) {\n      value = value?.[k]\n    }\n    return value || key\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('auth_token')\n        if (!token) return\n\n        const headers = { Authorization: `Bearer ${token}` }\n        \n        const userResponse = await axios.get('/api/auth/me', { headers })\n        setUser(userResponse.data)\n\n        const reportsResponse = await axios.get('/api/manager/reports/summary', { headers })\n        setStats(reportsResponse.data)\n      } catch (error) {\n        console.error('Failed to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  return (\n    <Layout user={user} translations={translations}>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            {t('dashboard.welcome')}, {user?.name}\n          </h1>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-sm\">₨</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">{t('dashboard.totalSales')}</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">\n                  ₨{stats.totalSales.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card>\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-red-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-sm\">₨</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">{t('dashboard.totalDues')}</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">\n                  ₨{stats.totalDues.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <Card>\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center\">\n                  <span className=\"text-white text-sm\">!</span>\n                </div>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">{t('dashboard.lowStock')}</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.lowStockItems}</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card title={t('dashboard.recentTransactions')}>\n            <div className=\"space-y-3\">\n              {stats.recentTransactions.slice(0, 5).map((transaction: any) => (\n                <div key={transaction.id} className=\"flex justify-between items-center py-2 border-b\">\n                  <div>\n                    <p className=\"font-medium\">{transaction.client.name}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {transaction.type === 'sale' ? t('transactions.sale') : t('transactions.payment')}\n                    </p>\n                  </div>\n                  <p className=\"font-semibold\">₨{transaction.amount.toLocaleString()}</p>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          <Card title={t('dashboard.quickActions')}>\n            <div className=\"space-y-3\">\n              <a\n                href=\"/manager/products\"\n                className=\"block w-full p-3 text-center bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n              >\n                {t('dashboard.addProduct')}\n              </a>\n              <a\n                href=\"/manager/clients\"\n                className=\"block w-full p-3 text-center bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors\"\n              >\n                {t('dashboard.addClient')}\n              </a>\n              <a\n                href=\"/manager/transactions\"\n                className=\"block w-full p-3 text-center bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors\"\n              >\n                {t('dashboard.newTransaction')}\n              </a>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const locale = detectLocaleFromCookie(context)\n  const translations = await loadTranslations(locale)\n\n  return {\n    props: {\n      translations\n    }\n  }\n}"
        }
    ]
}