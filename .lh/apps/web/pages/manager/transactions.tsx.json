{
    "sourceFile": "apps/web/pages/manager/transactions.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759222603604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759222603604,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react'\nimport type { GetServerSideProps } from 'next'\nimport { Card } from '@sabir-khatabook/ui'\nimport Layout from '@/components/Layout'\nimport { loadTranslations, detectLocaleFromCookie } from '@/utils/i18n'\nimport axios from 'axios'\n\ninterface Client {\n  id: number\n  name: string\n}\n\ninterface Product {\n  id: number\n  name: string\n}\n\ninterface Transaction {\n  id: number\n  type: 'sale' | 'payment'\n  amount: number\n  quantity?: number\n  note?: string\n  createdAt: string\n  client: Client\n  product?: Product\n}\n\ninterface TransactionsProps {\n  translations: any\n}\n\nexport default function Transactions({ translations }: TransactionsProps) {\n  const [user, setUser] = useState(null)\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  const t = (key: string) => {\n    const keys = key.split('.')\n    let value = translations\n    for (const k of keys) {\n      value = value?.[k]\n    }\n    return value || key\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const token = localStorage.getItem('auth_token')\n      if (!token) return\n\n      const headers = { Authorization: `Bearer ${token}` }\n      \n      const userResponse = await axios.get('/api/auth/me', { headers })\n      setUser(userResponse.data)\n\n      const clientsResponse = await axios.get('/api/manager/clients', { headers })\n      const allTransactions = []\n      \n      for (const client of clientsResponse.data) {\n        const transactionsResponse = await axios.get(`/api/manager/clients/${client.id}/transactions`, { headers })\n        allTransactions.push(...transactionsResponse.data.map((t: Omit<Transaction, 'client'>) => ({ ...t, client })))\n      }\n      \n      setTransactions(allTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()))\n    } catch (error) {\n      console.error('Failed to fetch data:', error)\n    }\n  }\n\n  return (\n    <Layout user={user} translations={translations}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">{t('transactions.title')}</h1>\n        </div>\n\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.date')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.client')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.type')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.product')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.quantity')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.amount')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('transactions.note')}\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {transactions.map((transaction: any) => (\n                  <tr key={transaction.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {new Date(transaction.createdAt).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {transaction.client.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        transaction.type === 'sale' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'\n                      }`}>\n                        {transaction.type === 'sale' ? t('transactions.sale') : t('transactions.payment')}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {transaction.product?.name || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {transaction.quantity || '-'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      â‚¨{transaction.amount.toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {transaction.note || '-'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      </div>\n    </Layout>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const locale = detectLocaleFromCookie(context)\n  const translations = await loadTranslations(locale)\n\n  return {\n    props: {\n      translations\n    }\n  }\n}"
        }
    ]
}