{
    "sourceFile": "apps/web/pages/manager/products.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759222603515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759222603515,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react'\nimport type { GetServerSideProps } from 'next'\nimport { Button, Input, Card } from '@sabir-khatabook/ui'\nimport Layout from '@/components/Layout'\nimport { loadTranslations, detectLocaleFromCookie } from '@/utils/i18n'\nimport axios from 'axios'\n\ninterface Product {\n  id: number\n  name: string\n  type: 'fertilizer' | 'seed' | 'spray'\n  unit: string\n  price: number\n  stock: number\n}\n\ninterface ProductsProps {\n  translations: any\n}\n\nexport default function Products({ translations }: ProductsProps) {\n  const [user, setUser] = useState(null)\n  const [products, setProducts] = useState<Product[]>([])\n  const [showModal, setShowModal] = useState(false)\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null)\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'fertilizer',\n    unit: '',\n    price: '',\n    stock: ''\n  })\n\n  const t = (key: string) => {\n    const keys = key.split('.')\n    let value = translations\n    for (const k of keys) {\n      value = value?.[k]\n    }\n    return value || key\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const token = localStorage.getItem('auth_token')\n      if (!token) return\n\n      const headers = { Authorization: `Bearer ${token}` }\n      \n      const userResponse = await axios.get('/api/auth/me', { headers })\n      setUser(userResponse.data)\n\n      const productsResponse = await axios.get('/api/manager/products', { headers })\n      setProducts(productsResponse.data)\n    } catch (error) {\n      console.error('Failed to fetch data:', error)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const token = localStorage.getItem('auth_token')\n      const headers = { Authorization: `Bearer ${token}` }\n\n      if (editingProduct) {\n        await axios.put(`/api/manager/products/${editingProduct.id}`, formData, { headers })\n      } else {\n        await axios.post('/api/manager/products', formData, { headers })\n      }\n\n      setShowModal(false)\n      setEditingProduct(null)\n      setFormData({ name: '', type: 'fertilizer', unit: '', price: '', stock: '' })\n      fetchData()\n    } catch (error) {\n      console.error('Failed to save product:', error)\n    }\n  }\n\n  const handleEdit = (product: any) => {\n    setEditingProduct(product)\n    setFormData({\n      name: product.name,\n      type: product.type,\n      unit: product.unit,\n      price: product.price.toString(),\n      stock: product.stock.toString()\n    })\n    setShowModal(true)\n  }\n\n  const handleDelete = async (id: number) => {\n    if (!confirm('Are you sure?')) return\n\n    try {\n      const token = localStorage.getItem('auth_token')\n      const headers = { Authorization: `Bearer ${token}` }\n      await axios.delete(`/api/manager/products/${id}`, { headers })\n      fetchData()\n    } catch (error) {\n      console.error('Failed to delete product:', error)\n    }\n  }\n\n  return (\n    <Layout user={user} translations={translations}>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">{t('products.title')}</h1>\n          <Button onClick={() => setShowModal(true)}>{t('products.add')}</Button>\n        </div>\n\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.name')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.type')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.unit')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.price')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.stock')}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {t('products.actions')}\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {products.map((product: any) => (\n                  <tr key={product.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {product.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {t(`products.${product.type}`)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {product.unit}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      â‚¨{product.price.toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        product.stock < 10 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'\n                      }`}>\n                        {product.stock}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 space-x-2\">\n                      <Button size=\"sm\" variant=\"secondary\" onClick={() => handleEdit(product)}>\n                        {t('products.edit')}\n                      </Button>\n                      <Button size=\"sm\" variant=\"danger\" onClick={() => handleDelete(product.id)}>\n                        {t('products.delete')}\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {showModal && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n              <h2 className=\"text-lg font-semibold mb-4\">\n                {editingProduct ? t('products.edit') : t('products.add')}\n              </h2>\n              \n              <form onSubmit={handleSubmit}>\n                <Input\n                  label={t('products.name')}\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  required\n                />\n\n                <div className=\"mb-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    {t('products.type')}\n                  </label>\n                  <select\n                    value={formData.type}\n                    onChange={(e) => setFormData({...formData, type: e.target.value})}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                    required\n                  >\n                    <option value=\"fertilizer\">{t('products.fertilizer')}</option>\n                    <option value=\"seed\">{t('products.seed')}</option>\n                    <option value=\"spray\">{t('products.spray')}</option>\n                  </select>\n                </div>\n\n                <Input\n                  label={t('products.unit')}\n                  value={formData.unit}\n                  onChange={(e) => setFormData({...formData, unit: e.target.value})}\n                  required\n                />\n\n                <Input\n                  label={t('products.price')}\n                  type=\"number\"\n                  value={formData.price}\n                  onChange={(e) => setFormData({...formData, price: e.target.value})}\n                  required\n                />\n\n                <Input\n                  label={t('products.stock')}\n                  type=\"number\"\n                  value={formData.stock}\n                  onChange={(e) => setFormData({...formData, stock: e.target.value})}\n                  required\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      setShowModal(false)\n                      setEditingProduct(null)\n                      setFormData({ name: '', type: 'fertilizer', unit: '', price: '', stock: '' })\n                    }}\n                  >\n                    {t('products.cancel')}\n                  </Button>\n                  <Button type=\"submit\">{t('products.save')}</Button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </Layout>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const locale = detectLocaleFromCookie(context)\n  const translations = await loadTranslations(locale)\n\n  return {\n    props: {\n      translations\n    }\n  }\n}"
        }
    ]
}